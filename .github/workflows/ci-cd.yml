name: CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build, Test and Release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Fetch all history for version bumping

      - name: Configure Git
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Build all packages
        run: npm run build

      - name: Verify schema is accessible
        run: |
          if [ ! -f "schemas/schemas/workflow-definition.schema.json" ]; then
            echo "Error: Schema file not found in submodule"
            exit 1
          fi
          echo "Schema file found in submodule"

      - name: Verify extension build
        run: |
          if [ ! -f "packages/extension/schemas/workflow-definition.schema.json" ]; then
            echo "Error: Schema not copied to extension during build"
            exit 1
          fi
          echo "Extension build successful with schema"

      - name: Check TypeScript compilation
        run: npx tsc --noEmit --project packages/core/tsconfig.json

      # Version bump - only on push to main
      - name: Determine version bump type
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        id: bump_type
        run: |
          # Get the commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          # Determine version bump type based on commit message
          # - Contains [major] or BREAKING CHANGE: -> major version
          # - Contains [minor] or feat: -> minor version
          # - Contains [beta] -> beta prerelease
          # - Contains [alpha] -> alpha prerelease
          # - Contains [rc] -> rc prerelease
          # - Default -> patch version

          if echo "$COMMIT_MSG" | grep -qiE '\[major\]|BREAKING CHANGE:'; then
            BUMP_TYPE="major"
            PRERELEASE=""
          elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|^feat:'; then
            BUMP_TYPE="minor"
            PRERELEASE=""
          elif echo "$COMMIT_MSG" | grep -qiE '\[beta\]'; then
            BUMP_TYPE="prerelease"
            PRERELEASE="beta"
          elif echo "$COMMIT_MSG" | grep -qiE '\[alpha\]'; then
            BUMP_TYPE="prerelease"
            PRERELEASE="alpha"
          elif echo "$COMMIT_MSG" | grep -qiE '\[rc\]'; then
            BUMP_TYPE="prerelease"
            PRERELEASE="rc"
          else
            BUMP_TYPE="patch"
            PRERELEASE=""
          fi

          echo "Version bump type: $BUMP_TYPE"
          echo "Prerelease type: $PRERELEASE"
          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Bump version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./packages/extension/package.json').version")
          echo "Current version: $CURRENT_VERSION"

          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          PRERELEASE="${{ steps.bump_type.outputs.prerelease }}"

          # Bump version based on type
          cd packages/extension
          if [ "$BUMP_TYPE" = "prerelease" ]; then
            # For prerelease versions
            npm version prerelease --preid="$PRERELEASE" --no-git-tag-version
          else
            # For regular versions (major, minor, patch)
            npm version "$BUMP_TYPE" --no-git-tag-version
          fi
          cd ../..

          # Also bump root package.json to match
          NEW_VERSION=$(node -p "require('./packages/extension/package.json').version")
          npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "previous=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Commit version bump
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        run: |
          git add -A
          git diff --staged --quiet || git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]"
          git push origin main || echo "No changes to push"

      # Release steps - only run on push to main (not on PRs)
      - name: Stage extension assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        run: |
          rm -rf packages/extension/dist-web
          mkdir -p packages/extension/dist-web
          cp -R packages/webview/dist-web/. packages/extension/dist-web/
          rm -rf packages/extension/schemas
          mkdir -p packages/extension/schemas
          cp schemas/schemas/workflow-definition.schema.json packages/extension/schemas/
          if [ -f LICENSE ]; then
            cp LICENSE packages/extension/
          fi

      - name: Package VSIX
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        run: npm run package

      - name: Locate VSIX artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        id: vsix
        run: |
          VSIX_FILE=$(find packages/extension -maxdepth 1 -name "*.vsix" -print -quit)
          if [ -z "$VSIX_FILE" ]; then
            echo "VSIX package not found" >&2
            exit 1
          fi
          echo "file=$VSIX_FILE" >> "$GITHUB_OUTPUT"

      - name: Compute release metadata
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        id: meta
        run: |
          # Use version from bump step if available, otherwise get current version
          if [ -n "${{ steps.version.outputs.version }}" ]; then
            VERSION="${{ steps.version.outputs.version }}"
            PREV_VERSION="${{ steps.version.outputs.previous }}"
            BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"
          else
            # Fallback if version bump was skipped
            VERSION=$(node -p "require('./packages/extension/package.json').version")
            PREV_VERSION="N/A"
            BUMP_TYPE="none"
          fi

          TAG="v${VERSION}"

          # Check if this is a prerelease
          if echo "$VERSION" | grep -qE 'alpha|beta|rc'; then
            PRERELEASE="true"
            RELEASE_TYPE=$(echo "$VERSION" | grep -oE 'alpha|beta|rc')
            NAME="${VERSION} (${RELEASE_TYPE} release)"
          else
            PRERELEASE="false"
            NAME="${VERSION}"
          fi

          # Create simple release body
          BODY="Release ${VERSION} from commit ${GITHUB_SHA:0:7}"

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "body=$BODY" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: Release ${{ steps.meta.outputs.name }}
          body: ${{ steps.meta.outputs.body }}
          files: ${{ steps.vsix.outputs.file }}
          prerelease: ${{ steps.meta.outputs.prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}